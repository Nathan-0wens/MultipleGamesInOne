//Need to add in an AI to play against someone
public struct playerInfo
{
  public String playerName;
  public char playerID;
};

public class ConnectGame
{
  playerInfo playerOne = new playerInfo();
  playerInfo playerTwo = new playerInfo();
  char[,] board = new char[9, 10];
  int drop, win, full, again; 

  Console.WriteLine("Player One please enter your name: ");
  playerOne.playerID = 'x';
  Console.WriteLine("Player Two please enter your name: ");
  playerTwo.playerID = 'y';

  full = 0;
  win = 0;
  again = 0;
  DisplayBoard(board);
  do
  {
    drop = PlayerDrop(board, playerOne);
    CheckBelow(board, playerOne, playerTwo);
    DisplayBoard(board);
    win = checkFour(board, playerOne);
    if(win == 1)
    {
      PlayerWin(playerOne);
      again = restart(board);
      if(again == 2)
      {
        break;
      }
    }

    drop = PlayerDrop(board, playerTwo);
    CheckBelow(board, playerTwo, playerOne);
    DisplayBoard(board);
    win = checkFour(board, playerTwo);
    if(win == 1)
    {
      PlayerWin(playerTwo);
      again = restart(board);
      if(again == 2)
      {
        break;
      }
    }

    full = fullBoard(board);
    if(full == 7)
    {
      Console.WriteLine("The board is full, so it is a tie.");
      again = restart(board);
    }
  }
  while(again != 2);
}
static int PlayerDrop9char[,] board, playerInfo currentPlayer)
{
  int drop;
  Console.WriteLine(currentPlayer.playerName + "'s turn");
  do
  {
    Console.WriteLine("Please pick a colum by choosing a number between 1 and 7.");
    drop = Convert.ToInt32(Console.ReadLine());
  }
  while(drop < 1 || drop > 7);
    while(board[1, drop] == 'x' || board[1, drop] == 'y')
    {
      Console.WriteLine("That colum is full, please choose a new colum.");
      drop = Convert.ToInt32(Console.ReadLine());
    }
return drop;
}

static void CheckBelow(char[,] board, playerInfo currentPlayer, int drop)
{
  int length, turn;
  length = 6;
  tuern = 0;

	do 
	{
		if ( board[length , drop] != 'X' && board[length , drop] != 'y' )
		{
			board[length , drop] = currentPlayer.playerID;
			turn = 1;
		}
		else
		--length;
	}while (  turn != 1 );
}

static void DisplayBoard ( char[,] board )
{
	int rows = 6, columns = 7, i, ix;
	
	for(i = 1; i <= rows; i++)
	{
		Console.Write("|");
		for(ix = 1; ix <= columns; ix++)
		{
			if(board[i , ix] != 'X' && board[i , ix] != 'y')
				board[i , ix] = '*';

			Console.Write( board[i , ix] );
			
		}

		Console.Write("| \n");
	}

}
static int CheckFour ( char[,] board, playerInfo currentPlayer )
{
	char XO;
	int win;
	
	XO = currentPlayer.playerID;
	win = 0;

	for( int i = 8; i >= 1; --i )
	{
		
		for( int ix = 9; ix >= 1; --ix )
		{
			
			if( board[i , ix] == XO     &&
				board[i-1 , ix-1] == XO &&
				board[i-2 , ix-2] == XO &&
				board[i-3 , ix-3] == XO )
			{
				win = 1;
			}
			

			if( board[i , ix] == XO   &&
				board[i , ix-1] == XO &&
				board[i , ix-2] == XO &&
				board[i , ix-3] == XO )
			{
				win = 1;
			}
					
			if( board[i , ix] == XO   &&
				board[i-1 , ix] == XO &&
				board[i-2 , ix] == XO &&
				board[i-3 , ix] == XO )
			{	
				win = 1;
			}
					
			if( board[i , ix] == XO     &&
				board[i-1 , ix+1] == XO &&
				board[i-2 , ix+2] == XO &&
				board[i-3 , ix+3] == XO )
			{
				win = 1;
			}
						
			if ( board[i , ix] == XO   &&
				 board[i , ix+1] == XO &&
				 board[i , ix+2] == XO &&
				 board[i , ix+3] == XO )
			{
				win = 1;
			}
		}
		
	}

return win;
}

static int fullBoard( char[,] board )
{
	int full;
	full = 0;
	for ( int i = 1; i <= 7; ++i )
	{
		if ( board[1 , i] != '*' )
			++full;
	}

return full;
}

static void PlayerWin ( playerInfo activePlayer )
{
	Console.WriteLine( currentPlayer.playerName + " Connected Four, You Win!" );
}

static int restart ( char[,] board )
{
	int restart;

	Console.WriteLine("Would you like to restart? Yes(1) No(2): ");
	restart = Convert.ToInt32(Console.ReadLine());
	if ( restart == 1 )
	{
		for(int i = 1; i <= 6; i++)
		{
			for(int ix = 1; ix <= 7; ix++)
			{
				board[i , ix] = '*';
			}
		}
	}
	else
		Console.WriteLine("Goodbye!");
return restart;
}
